---
path: <%= projectName %>/vite.config.ts
---
import vue from "@vitejs/plugin-vue";
import * as changeCase from "change-case";
import fg from "fast-glob";
import { writeFileSync } from "fs";
import { join, resolve } from "path";
import { PreRenderedChunk } from "rollup";
import { Plugin, defineConfig } from "vite";
import dts from "vite-plugin-dts";

const prefix = "<%= componentPrefix %>";
const regex = /src\/components\/([^/]+)\/index\.ts/;
const componentEntries = Object.fromEntries(
  fg
    .sync("src/components/*/index.ts")
    .map((path) => [path.match(regex)![1], path]),
);
const componentEntryNames = Object.keys(componentEntries);

function isComponentEntry(name: string) {
  return componentEntryNames.includes(name);
}

function postBuild(): Plugin {
  return {
    name: "vite-plugin-post-build",
    buildEnd() {
      const exportStr = [
        "export {};",
        'declare module "vue" {',
        "  export interface GlobalComponents {",
        componentEntryNames
          .map(
            (name) =>
              `    ${changeCase.pascalCase(prefix)}${name}: (typeof import("<%= projectName %>"))["${name}"];`,
          )
          .join("\n"),
        "  }",
        "}",
      ].join("\n");
      writeFileSync(join(process.cwd(), "global.d.ts"), exportStr);
    },
  };
}

const entryFileNames = ({ name, ...rest }: PreRenderedChunk) => {
  return name === "index" ? `[format]/index.js` : `[format]/[name]/index.js`;
};

const assetFileNames = ({ name }) => {
  if (name?.endsWith(".css")) {
    const cssName = name?.replace(".css", "");
    if (cssName === "index") return "styles/index.css";
    if (isComponentEntry(cssName)) return `styles/${cssName}/index.css`;
  }
  return name!;
};

/**
 * Vite configuration file
 */
export default defineConfig({
  resolve: {
    alias: {
      "@": resolve(__dirname, "src"),
    },
  },
  plugins: [
    vue(),
    dts({
      include: ["src/*.ts", "src/components/**/*.{ts,vue}"],
      outDir: "dist/types",
      rollupTypes: true,
    }),
    postBuild(),
  ],
  build: {
    lib: {
      entry: {
        index: "src/index.ts",
        ...componentEntries,
      },
      name: "<%= $s.changeCase.camelCase(projectName) %>",
      formats: ["cjs", "es"],
    },
    cssCodeSplit: true,
    rollupOptions: {
      external: ["vue"],
      output: {
        exports: "named",
        entryFileNames,
        assetFileNames,
        chunkFileNames: "chunks/[name].[format].js",
        intro: ({ facadeModuleId }) => {
          const componentName = facadeModuleId?.match(regex)?.[1];
          if (componentName) {
            return `import "../../styles/${componentName}/index.css";`;
          }
          return "";
        },
      },
    },
  },
});
